#coding: utf-8 -*-


def decorator_func(func):
    def wrapper(vector1, vector2):
        if len(vector1.coordinates) == len(vector2.coordinates):
            func()
        else:
            print("TypeError: Unsupported operands error - Vectors must be the same dimension")
    return wrapper

class Vector:
    def __init__(self, *args):
        self.coordinates = args

    def __str__(self):
        return str(self.first_crd)+","+str(self.sec_crd)
        
    @decorator_func
    def __add__(self, other):
        total_first_coord = self.first_crd + other.first_crd
        total_sec_coord = self.sec_crd + other.sec_crd
        return Vector(total_first_coord, total_sec_coord)

    @decorator_func
    def __sub__(self, other):
        total_first_coord = self.first_crd - other.first_crd
        total_sec_coord = self.sec_crd - other.sec_crd
        return Vector(total_first_coord, total_sec_coord)

    @decorator_func
    def __matmul__(self, other):
        total_first_coord = self.first_crd * other.first_crd
        total_sec_coord = self.sec_crd * other.sec_crd
        return total_first_coord + total_sec_coord

    @decorator_func
    def __mul__(self, other):
        total_x_coord = self.first_crd * other.sec_crd
        total_y_coord = self.sec_crd * other.first_crd
        return total_x_coord + total_y_coord


if __name__ == '__main__':
    vector1 = Vector(1, 2)
    vector2 = Vector(2, 3)
    print(vector1 + vector2)
    print(vector1 - vector2)
    print(vector1 @ vector2)
    print(vector1 * vector2)

